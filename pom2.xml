<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<groupId>com.devops</groupId>
	<artifactId>mysocks</artifactId>
	<version>1.0.0</version>
	<packaging>jar</packaging>

	<name>MySocks Spring Boot Application</name>
	<description>Spring Boot application for authentication and user management</description>

	<!-- Inheriting from Spring Boot Parent -->
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.2.0</version>
		<relativePath />
	</parent>

	<!-- Project Properties -->
	<properties>
		<java.version>17</java.version>
		<mapstruct.version>1.5.5.Final</mapstruct.version>
		<lombok.version>1.18.30</lombok.version>
		<maven.compiler.plugin.version>3.11.0</maven.compiler.plugin.version>
		<maven.surefire.plugin.version>3.1.2</maven.surefire.plugin.version>
	</properties>

	<!-- Dependencies -->
	<dependencies>
		<!-- Spring Boot Starters -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>

		<!-- Spring Boot Data JPA Starter -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>

		<!-- Hibernate Validator -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
			<version>8.0.0.Final</version> 
		</dependency>

		<!-- Jakarta Persistence API -->
		<dependency>
			<groupId>jakarta.persistence</groupId>
			<artifactId>jakarta.persistence-api</artifactId>
		</dependency>

		<dependency>
			<groupId>org.ehcache</groupId>
			<artifactId>ehcache</artifactId>
		</dependency>


		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>

		</dependency>


		<!-- Spring Session for Redis -->
		<dependency>
			<groupId>org.springframework.session</groupId>
			<artifactId>spring-session-data-redis</artifactId>
		</dependency>

		<!-- jedis (Default Redis Client) -->
		<dependency>
			<groupId>redis.clients</groupId>
			<artifactId>jedis</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-cache</artifactId>
		</dependency>

		<!-- Spring Boot Starter for Redis -->
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-data-redis</artifactId>
    <exclusions>
        <exclusion>
            <groupId>io.lettuce.core</groupId>
            <artifactId>lettuce-core</artifactId>
        </exclusion>
    </exclusions>
</dependency>
		<!-- Optional: Jackson for Redis Serialization -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
		</dependency>

		<!-- MySQL Connector/J JDBC Driver -->
		<dependency>
			<groupId>com.mysql</groupId>
			<artifactId>mysql-connector-j</artifactId>

		</dependency>


		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jdbc</artifactId>
		</dependency>

		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>6.4.0.Final</version>
		</dependency>


		<!-- Flyway for DB Migration -->
		<dependency>
			<groupId>org.flywaydb</groupId>
			<artifactId>flyway-mysql</artifactId>

		</dependency>


		<!-- Lombok (Compile-time annotations) -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- MapStruct (DTO Mapping) -->
		<dependency>
			<groupId>org.mapstruct</groupId>
			<artifactId>mapstruct</artifactId>
			<version>${mapstruct.version}</version>
		</dependency>
		<dependency>
			<groupId>org.mapstruct</groupId>
			<artifactId>mapstruct-processor</artifactId>
			<version>${mapstruct.version}</version>
			<scope>provided</scope>
		</dependency>

		<!-- OAuth2 Security -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-oauth2-client</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-oauth2-jose</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-oauth2-resource-server</artifactId>
		</dependency>

		<!-- Actuator for Monitoring -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>

		<!-- JWT Authentication -->
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-api</artifactId>
			<version>0.11.5</version>
		</dependency>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-impl</artifactId>
			<version>0.11.5</version>
			<scope>runtime</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
        </dependency>

		
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-jackson</artifactId>
			<version>0.11.5</version>
			<scope>runtime</scope>
		</dependency>


		<!-- Spring Boot DevTools (Only for Development) -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>

		<!-- Spring Boot Starter Validation -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>

		<!-- Spring Boot Starter Test -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- HikariCP (Connection Pool) -->
		<dependency>
			<groupId>com.zaxxer</groupId>
			<artifactId>HikariCP</artifactId>

		</dependency>

		<!-- Spring Security Test -->
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- Apache Commons IO (File handling utilities) -->
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.11.0</version>
		</dependency>

		<!-- Thymeleaf (For Templates) -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>


		<!-- SLF4J for logging -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
		</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
		</dependency>


	</dependencies>

	<!-- Repositories -->
	<repositories>
		<repository>
			<id>central</id>
			<url>https://repo.maven.apache.org/maven2</url>
		</repository>
	</repositories>

	<!-- Build Section -->
	<build>
		<plugins>
			<!-- Spring Boot Maven Plugin -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>

			<!-- Maven Compiler Plugin -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>

				<configuration>
					<source>${java.version}</source>
					<target>${java.version}</target>
				</configuration>
			</plugin>

			<!-- Exec Plugin: Moves JAR to ${env.MYSOCKS_HOME}/bin -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>3.1.0</version>
				<executions>
					<execution>
						<id>copy-bin</id>
						<phase>package</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>cmd</executable>
							<arguments>
								<argument>/c</argument>
								<argument>if not exist "%MYSOCKS_HOME%\\bin" mkdir "%MYSOCKS_HOME%\\bin" &amp;&amp; copy /Y target\\mysocks-1.0.0.jar "%MYSOCKS_HOME%\\bin\\mysocks-1.0.0.jar"</argument>
							</arguments>
						</configuration>
					</execution>
					<!-- Execution for config -->
					<execution>
						<id>copy-config</id>
						<phase>package</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>cmd</executable>
							<arguments>
								<argument>/c</argument>
								<argument>if not exist "%MYSOCKS_HOME%\\config" mkdir "%MYSOCKS_HOME%\\config" &amp;&amp; xcopy /E /H /C /I /Y target\\classes\\config "%MYSOCKS_HOME%\\config"</argument>
							</arguments>
						</configuration>
					</execution>
					<!-- Execution for database_script -->
					<execution>
						<id>copy-database_script</id>
						<phase>package</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>cmd</executable>
							<arguments>
								<argument>/c</argument>
								<argument>if not exist "%MYSOCKS_HOME%\\database_script" mkdir "%MYSOCKS_HOME%\\database_script" &amp;&amp; xcopy /E /H /C /I /Y target\\classes\\database_script "%MYSOCKS_HOME%\\database_script"</argument>
							</arguments>
						</configuration>
					</execution>
					<!-- Execution for security -->
					<execution>
						<id>copy-security</id>
						<phase>package</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>cmd</executable>
							<arguments>
								<argument>/c</argument>
								<argument>if not exist "%MYSOCKS_HOME%\\security" mkdir "%MYSOCKS_HOME%\\security" &amp;&amp; xcopy /E /H /C /I /Y target\\classes\\security "%MYSOCKS_HOME%\\security"</argument>
							</arguments>
						</configuration>
					</execution>
					<!-- Execution for static -->
					<execution>
						<id>copy-static</id>
						<phase>package</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>cmd</executable>
							<arguments>
								<argument>/c</argument>
								<argument>if not exist "%MYSOCKS_HOME%\\gui" mkdir "%MYSOCKS_HOME%\\gui" &amp;&amp; if not exist "%MYSOCKS_HOME%\\gui\\static" mkdir "%MYSOCKS_HOME%\\gui\\static" &amp;&amp; xcopy /E /H /C /I /Y target\\classes\\static "%MYSOCKS_HOME%\\gui\\static"</argument>
							</arguments>
						</configuration>
					</execution>
					<!-- Execution for templates -->
					<execution>
						<id>copy-templates</id>
						<phase>package</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>cmd</executable>
							<arguments>
								<argument>/c</argument>
								<argument>if not exist "%MYSOCKS_HOME%\\gui\\templates" mkdir "%MYSOCKS_HOME%\\gui\\templates" &amp;&amp; xcopy /E /H /C /I /Y target\\classes\\templates "%MYSOCKS_HOME%\\gui\\templates"</argument>
							</arguments>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Clean Plugin: Removes ${env.MYSOCKS_HOME}/bin -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-antrun-plugin</artifactId>

				<executions>
					<execution>
						<phase>clean</phase>
						<goals>
							<goal>run</goal>
						</goals>
						<configuration>
							<target>
								<echo message="Deleting ${env.MYSOCKS_HOME}/bin" />
								<echo
									message="Deleting contents of ${project.build.directory}" />
								<delete dir="${env.MYSOCKS_HOME}\" />
								<delete dir="${project.build.directory}">
									<include name="**/*" />
								</delete>
							</target>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Surefire Plugin for Testing -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>

				<configuration>
					<testFailureIgnore>false</testFailureIgnore>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>
